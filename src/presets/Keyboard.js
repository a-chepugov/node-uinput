import UInput from '../models/UInput.js';
import Device from './Device.js';

/** @typedef {import('./Device.js').Event} Event */

const T = UInput.Event.TYPES;
const { KEY } = UInput.Event.CODES;

/**
 * @type {Record<string, Event>}
 */
const EVENTS = {
	KEY_ESC:
		[T.KEY, KEY.KEY_ESC],

	KEY_F1:
		[T.KEY, KEY.KEY_F1],
	KEY_F2:
		[T.KEY, KEY.KEY_F2],
	KEY_F3:
		[T.KEY, KEY.KEY_F3],
	KEY_F4:
		[T.KEY, KEY.KEY_F4],
	KEY_F5:
		[T.KEY, KEY.KEY_F5],
	KEY_F6:
		[T.KEY, KEY.KEY_F6],
	KEY_F7:
		[T.KEY, KEY.KEY_F7],
	KEY_F8:
		[T.KEY, KEY.KEY_F8],
	KEY_F9:
		[T.KEY, KEY.KEY_F9],
	KEY_F10:
		[T.KEY, KEY.KEY_F10],
	KEY_F11:
		[T.KEY, KEY.KEY_F11],
	KEY_F12:
		[T.KEY, KEY.KEY_F12],

	KEY_GRAVE:
		[T.KEY, KEY.KEY_GRAVE],

	KEY_1:
		[T.KEY, KEY.KEY_1],
	KEY_2:
		[T.KEY, KEY.KEY_2],
	KEY_3:
		[T.KEY, KEY.KEY_3],
	KEY_4:
		[T.KEY, KEY.KEY_4],
	KEY_5:
		[T.KEY, KEY.KEY_5],
	KEY_6:
		[T.KEY, KEY.KEY_6],
	KEY_7:
		[T.KEY, KEY.KEY_7],
	KEY_8:
		[T.KEY, KEY.KEY_8],
	KEY_9:
		[T.KEY, KEY.KEY_9],
	KEY_0:
		[T.KEY, KEY.KEY_0],
	KEY_MINUS:
		[T.KEY, KEY.KEY_MINUS],
	KEY_EQUAL:
		[T.KEY, KEY.KEY_EQUAL],

	KEY_BACKSPACE:
		[T.KEY, KEY.KEY_BACKSPACE],

	KEY_TAB:
		[T.KEY, KEY.KEY_TAB],

	KEY_Q:
		[T.KEY, KEY.KEY_Q],
	KEY_W:
		[T.KEY, KEY.KEY_W],
	KEY_E:
		[T.KEY, KEY.KEY_E],
	KEY_R:
		[T.KEY, KEY.KEY_R],
	KEY_T:
		[T.KEY, KEY.KEY_T],
	KEY_Y:
		[T.KEY, KEY.KEY_Y],
	KEY_U:
		[T.KEY, KEY.KEY_U],
	KEY_I:
		[T.KEY, KEY.KEY_I],
	KEY_O:
		[T.KEY, KEY.KEY_O],
	KEY_P:
		[T.KEY, KEY.KEY_P],
	KEY_LEFTBRACE:
		[T.KEY, KEY.KEY_LEFTBRACE],
	KEY_RIGHTBRACE:
		[T.KEY, KEY.KEY_RIGHTBRACE],

	KEY_A:
		[T.KEY, KEY.KEY_A],
	KEY_S:
		[T.KEY, KEY.KEY_S],
	KEY_D:
		[T.KEY, KEY.KEY_D],
	KEY_F:
		[T.KEY, KEY.KEY_F],
	KEY_G:
		[T.KEY, KEY.KEY_G],
	KEY_H:
		[T.KEY, KEY.KEY_H],
	KEY_J:
		[T.KEY, KEY.KEY_J],
	KEY_K:
		[T.KEY, KEY.KEY_K],
	KEY_L:
		[T.KEY, KEY.KEY_L],
	KEY_SEMICOLON:
		[T.KEY, KEY.KEY_SEMICOLON],
	KEY_APOSTROPHE:
		[T.KEY, KEY.KEY_APOSTROPHE],

	KEY_Z:
		[T.KEY, KEY.KEY_Z],
	KEY_X:
		[T.KEY, KEY.KEY_X],
	KEY_C:
		[T.KEY, KEY.KEY_C],
	KEY_V:
		[T.KEY, KEY.KEY_V],
	KEY_B:
		[T.KEY, KEY.KEY_B],
	KEY_N:
		[T.KEY, KEY.KEY_N],
	KEY_M:
		[T.KEY, KEY.KEY_M],
	KEY_COMMA:
		[T.KEY, KEY.KEY_COMMA],
	KEY_DOT:
		[T.KEY, KEY.KEY_DOT],
	KEY_SLASH:
		[T.KEY, KEY.KEY_SLASH],

	KEY_SPACE:
		[T.KEY, KEY.KEY_SPACE],


	KEY_INSERT:
		[T.KEY, KEY.KEY_INSERT],
	KEY_DELETE:
		[T.KEY, KEY.KEY_DELETE],
	KEY_HOME:
		[T.KEY, KEY.KEY_HOME],
	KEY_END:
		[T.KEY, KEY.KEY_END],
	KEY_PAGEUP:
		[T.KEY, KEY.KEY_PAGEUP],
	KEY_PAGEDOWN:
		[T.KEY, KEY.KEY_PAGEDOWN],


	KEY_LEFT:
		[T.KEY, KEY.KEY_LEFT],
	KEY_RIGHT:
		[T.KEY, KEY.KEY_RIGHT],
	KEY_UP:
		[T.KEY, KEY.KEY_UP],
	KEY_DOWN:
		[T.KEY, KEY.KEY_DOWN],



	KEY_KPSLASH:
		[T.KEY, KEY.KEY_KPSLASH],
	KEY_KPASTERISK:
		[T.KEY, KEY.KEY_KPASTERISK],
	KEY_KPMINUS:
		[T.KEY, KEY.KEY_KPMINUS],
	KEY_KPPLUS:
		[T.KEY, KEY.KEY_KPPLUS],
	KEY_KPENTER:
		[T.KEY, KEY.KEY_KPENTER],

	KEY_KP0:
		[T.KEY, KEY.KEY_KP0],
	KEY_KP1:
		[T.KEY, KEY.KEY_KP1],
	KEY_KP2:
		[T.KEY, KEY.KEY_KP2],
	KEY_KP3:
		[T.KEY, KEY.KEY_KP3],
	KEY_KP4:
		[T.KEY, KEY.KEY_KP4],
	KEY_KP5:
		[T.KEY, KEY.KEY_KP5],
	KEY_KP6:
		[T.KEY, KEY.KEY_KP6],
	KEY_KP7:
		[T.KEY, KEY.KEY_KP7],
	KEY_KP8:
		[T.KEY, KEY.KEY_KP8],
	KEY_KP9:
		[T.KEY, KEY.KEY_KP9],
	KEY_KPDOT:
		[T.KEY, KEY.KEY_KPDOT],



	KEY_NUMLOCK:
		[T.KEY, KEY.KEY_NUMLOCK],
	KEY_CAPSLOCK:
		[T.KEY, KEY.KEY_CAPSLOCK],
	KEY_SCROLLLOCK:
		[T.KEY, KEY.KEY_SCROLLLOCK],

	KEY_LEFTSHIFT:
		[T.KEY, KEY.KEY_LEFTSHIFT],
	KEY_RIGHTSHIFT:
		[T.KEY, KEY.KEY_RIGHTSHIFT],

	KEY_LEFTALT:
		[T.KEY, KEY.KEY_LEFTALT],
	KEY_RIGHTALT:
		[T.KEY, KEY.KEY_RIGHTALT],

	KEY_LEFTCTRL:
		[T.KEY, KEY.KEY_LEFTCTRL],
	KEY_RIGHTCTRL:
		[T.KEY, KEY.KEY_RIGHTCTRL],

	KEY_LEFTMETA:
		[T.KEY, KEY.KEY_LEFTMETA],
	KEY_RIGHTMETA:
		[T.KEY, KEY.KEY_RIGHTMETA],

	KEY_BACKSLASH:
		[T.KEY, KEY.KEY_BACKSLASH],
	KEY_ENTER:
		[T.KEY, KEY.KEY_ENTER],

	KEY_MENU:
		[T.KEY, KEY.KEY_MENU],


	KEY_COMPOSE:
		[T.KEY, KEY.KEY_COMPOSE],

	KEY_102ND:
		[T.KEY, KEY.KEY_102ND],
};

/**
 * @description virtual keyboard
 */
class Keyboard extends Device {
	static EVENTS = EVENTS;

	constructor(name = 'node-virtual-keyboard') {
		const options = Device.eventsToOptions(EVENTS);
		super(options, name);
	}
}

export default Keyboard;

